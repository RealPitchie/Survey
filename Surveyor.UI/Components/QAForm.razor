@using Surveyor.Domain.Models
@namespace WebComponents
 
<MudPaper Elevation="3" style="margin: 15px auto; padding: 15px; max-width: 500px">
    <h4>@Survey.Name</h4>
    @if (_question != null)
    {
        @if (!string.IsNullOrEmpty(_question.Name))
        {
            <p>@_question.Name</p>
            @if (_question.Type == ItemType.List)
            {
                <MudSelect Placeholder="Выберите ответ" T="string" @bind-Value="@_currentAnswer.Value">
                    @foreach (var option in _question.Options.Split('\n'))
                    {
                        <MudSelectItem T="string" Value="@option">@option</MudSelectItem>
                    }
                </MudSelect>

            }
            @if (_question.Type == ItemType.Text)
            {
                <MudTextField T="string" Lines="5" Outline="true" @bind-Value="@_currentAnswer.Value"></MudTextField>
            }
            @if (_question.Type == ItemType.YesNo)
            {
                <MudSwitch 
                    @bind-Checked="_currentAnswer.Value"
                    Color="Color.Error"
                    Converter="@(new CustomStringToBoolConverter())">
                        @_currentAnswer.Value
                </MudSwitch> 
            }
            @if (_isAlerted)
            {
                <MudAlert Severity="Severity.Error" >Вы не дали ответ</MudAlert>
            }
            <MudDivider Light="true" Style="margin-bottom: 15px"/>
            <MudButton Size="Size.Small" Color="Color.Primary" Variant="Variant.Outlined" OnClick="Answer">Далее</MudButton>
        }
        @if (string.IsNullOrEmpty(_question.Name))
        {
            @foreach (var item in _newResult.Answers)
            {
                <p>@item.Value</p>
            }
            <MudButton Size="Size.Small" Variant="Variant.Outlined" OnClick="Submit">Завершить</MudButton>
        }
    }

</MudPaper>
@code {
    #nullable disable
    [Parameter, EditorRequired]
    public Survey Survey { get; set; }
    [Parameter, EditorRequired]
    public EventCallback<Survey> OnSubmit { get; set; }

    SurveyResult _newResult = new();
    int _index = 0;
    SurveyItem _question;
    Answer _currentAnswer = new();
    bool _isAlerted = false;
    
    protected override void OnInitialized()
    {
        if(Survey.Items != null) _question = Survey.Items[_index];
    }

    string BoolToString(bool args)
    {
        return args switch
        {
            true => "Да",
            false => "Нет"
            };
    }
    void Answer()
    {
        if (string.IsNullOrEmpty(_currentAnswer.Value))
        {
            _isAlerted = true;
            return;
        }
        _newResult.Answers.Add(_currentAnswer);
        _currentAnswer = new Answer();
        _index++;
        _question = Survey.Items.Count > _index? Survey.Items[_index] : new SurveyItem();
        _isAlerted = false;
    }

    async Task Submit()
    { 
        Survey.Results.Add(_newResult);
        await OnSubmit.InvokeAsync(Survey);
    }
    public class CustomStringToBoolConverter : BoolConverter<string>
    {

        public CustomStringToBoolConverter()
        {
            SetFunc = OnSet;
            GetFunc = OnGet;
        }

        private string TrueString = "Да";
        private string FalseString = "Нет";
        private string NullString = "Не знаю";

        private string OnGet(bool? value)
        {
            try
            {
                return (value == true) ? TrueString : FalseString;
            }
            catch (Exception e)
            {
                UpdateGetError("Conversion error: " + e.Message);
                return NullString;
            }
        }

        private bool? OnSet(string arg)
        {
            if (arg == null)
                return null;
            try
            {
                if (arg == TrueString)
                    return true;
                if (arg == FalseString)
                    return false;
                else
                    return null;
            }
            catch (FormatException e)
            {
                UpdateSetError("Conversion error: " + e.Message);
                return null;
            }
        }

    }
}